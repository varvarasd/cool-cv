$class: 'experience';

.#{$class} {
  @extend %section-container;
}

.#{$class}-section-title {
  @extend %section-title;
}

.#{$class}-list-header {
  // make the list header full width
  display: block;
  font-size: 1.5rem;
  padding: 1.5rem;
  background-color: $color-lily;
  color: $color-white;
  cursor: pointer;
  border-bottom: 0.1rem solid darken($color-lily, 10);
  &:last-of-type {
    border-bottom: none;
  }
  .resume-icon-plus {
    float: right;
  }
}



.#{$class}-list-body {
  // use max-height and overflow:hidden CSS Trick
  // to make a PURE CSS accordion
  max-height: 0;
  overflow: hidden;
  display: block;
  // and add a quick animation of a quarter of a second
  // the checked / not checked state will make elements
  // transition from 0 height to actual height or the
  // other way around
  transition: 0.25s;
}

.#{$class}-list-radio {
  // hide all the input type radio buttons
  display: none;
}

.#{$class}-list-company {
  font-weight: bold;
}

.#{$class}-list-date {
  font-style: italic;
}

.#{$class}-list-date,
.#{$class}-list-company,
.#{$class}-responsibility-list-item,
.#{$class}-list-summary {
  padding: 1.2rem;
}

.#{$class}-list-info {
  // use display:flex to make the children appear on the same row
  display: flex;
  // and use space between of justify content to make them
  // sit one to the left and one to the right
  justify-content: space-between;
}

.#{$class}-responsability-list {
  margin-bottom: 0.4rem;
}

.#{$class}-responsability-list-item,
.#{$class}-list-summary {
  line-height: 1.5;
  font-size: 1.2rem;
  text-align: justify;
}

.#{$class}-responsability-list-item {
  // make the list item lose touch with the body
  // and make it sit centered
  width: 98%;
  margin: 0 auto;

  // alternate background colour using even and odd
  // parameters of nth-child pseudo selector
  &:nth-child(odd) {
    background-color: lighten($color-almond, 10%);
  }
  &:nth-child(even) {
    background-color: lighten($color-lily, 10%);
  }
}

// we're using the adjacent selector "+" to apply css properties
// to the next sibling element based on the checked state of the
// first element
// Exaple:
// <section>
//   <input type="radio">
//   <div>text</div>
//   <input type="radio">
//   <div>text</div>
// </section>
// in the example above the input and div elements are all
// siblings, because they are on the same level and children
// of the same parent


.#{$class}-list-radio:checked + .#{$class}-list-header {
  // change the background color of the selected header experience
  background-color: $color-gumbo;
  border-bottom: none;

  .resume-icon-plus {
    transform: rotate(45deg);
  }
}

  // We use the adjacent selector twice, which means we are targeting
  // the next next sibling. Example:
  // <section>
  //   <input type="radio" checked>
  //   <div class="header">title</div>
  //   <div class="body">text</div> <!-- <=-- this is the targeted element -->
  //   <input type="radio">
  //   <div class="header">title</div>
  //   <div class="body">text</div>
  // </section>
  // In this example the input:checked + div + div will target
  // the .body div that follows the input with checked state.

.#{$class}-list-radio:checked + .#{$class}-list-header + .#{$class}-list-body {
  max-height: 100rem;
  border: 0.1rem solid darken($color-gumbo, 10);
}
